---
import Card from "@components/Card";
import Footer from "@components/Footer.astro";
import Header from "@components/Header.astro";
import { SITE } from "@config";
import Layout from "@layouts/Layout.astro";
import Main from "@layouts/Main.astro";
import { getPostsWithRT } from "@utils/getPostsWithRT";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

const blogEntries = await getCollection("blog", ({ data }) => !data.draft);
const posts = await getPostsWithRT(blogEntries);

type PostYear = {
  year: number;
  posts: Record<string, CollectionEntry<"blog">[]>;
};

// Group posts by year
const yearGroups = posts.reduce(
  (acc, post) => {
    const year = post.data.pubDatetime.getFullYear().toString();
    if (!acc[year]) acc[year] = [];
    acc[year].push(post);
    return acc;
  },
  {} as Record<string, CollectionEntry<"blog">[]>
);

// Group posts by month within each year
const monthGroups: PostYear[] = Object.entries(yearGroups).map(([year, yearPosts]) => {
  const monthPosts = yearPosts.reduce(
    (acc, post) => {
      const month = (post.data.pubDatetime.getMonth() + 1).toString();
      if (!acc[month]) acc[month] = [];
      acc[month].push(post);
      return acc;
    },
    {} as Record<string, CollectionEntry<"blog">[]>
  );

  return {
    year: parseInt(year),
    posts: monthPosts,
  };
});
---

<Layout title={`Archives | ${SITE.title}`}>
  <Header activeNav="archives" />
  <Main pageTitle="Archives" pageDesc="All the articles I've posted.">
    <ul>
      {
        monthGroups
          .sort((a: PostYear, b: PostYear) => b.year - a.year)
          .map(({ year, posts }) => (
            <li class="mb-8">
              <h2 class="mb-4 text-2xl font-semibold">{year}</h2>
              <ul>
                {Object.entries(posts)
                  .sort(([a], [b]) => parseInt(b) - parseInt(a))
                  .map(([month, posts]) => (
                    <li class="mb-4">
                      <h3 class="mb-2 text-lg font-medium">
                        {new Date(year, parseInt(month) - 1).toLocaleString("default", {
                          month: "long",
                        })}
                      </h3>
                      <ul>
                        {posts
                          .sort(
                            (a, b) => b.data.pubDatetime.getTime() - a.data.pubDatetime.getTime()
                          )
                          .map((post) => (
                            <Card
                              href={`/posts/${post.slug}`}
                              frontmatter={post.data}
                              secHeading={false}
                            />
                          ))}
                      </ul>
                    </li>
                  ))}
              </ul>
            </li>
          ))
      }
    </ul>
  </Main>
  <Footer />
</Layout>
